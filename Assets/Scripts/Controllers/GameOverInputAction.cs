//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Scripts/Controllers/GameOverInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameOverInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameOverInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameOverInputAction"",
    ""maps"": [
        {
            ""name"": ""GameOverMap"",
            ""id"": ""4b032de9-d51e-402f-b008-4654e6fd5512"",
            ""actions"": [
                {
                    ""name"": ""RestartGame"",
                    ""type"": ""Button"",
                    ""id"": ""16cfeffa-277e-4026-807b-63c78bed23e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8a692e54-c41b-450d-9e8a-cbaaad2c3657"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RestartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": []
        }
    ]
}");
        // GameOverMap
        m_GameOverMap = asset.FindActionMap("GameOverMap", throwIfNotFound: true);
        m_GameOverMap_RestartGame = m_GameOverMap.FindAction("RestartGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameOverMap
    private readonly InputActionMap m_GameOverMap;
    private List<IGameOverMapActions> m_GameOverMapActionsCallbackInterfaces = new List<IGameOverMapActions>();
    private readonly InputAction m_GameOverMap_RestartGame;
    public struct GameOverMapActions
    {
        private @GameOverInputAction m_Wrapper;
        public GameOverMapActions(@GameOverInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @RestartGame => m_Wrapper.m_GameOverMap_RestartGame;
        public InputActionMap Get() { return m_Wrapper.m_GameOverMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameOverMapActions set) { return set.Get(); }
        public void AddCallbacks(IGameOverMapActions instance)
        {
            if (instance == null || m_Wrapper.m_GameOverMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameOverMapActionsCallbackInterfaces.Add(instance);
            @RestartGame.started += instance.OnRestartGame;
            @RestartGame.performed += instance.OnRestartGame;
            @RestartGame.canceled += instance.OnRestartGame;
        }

        private void UnregisterCallbacks(IGameOverMapActions instance)
        {
            @RestartGame.started -= instance.OnRestartGame;
            @RestartGame.performed -= instance.OnRestartGame;
            @RestartGame.canceled -= instance.OnRestartGame;
        }

        public void RemoveCallbacks(IGameOverMapActions instance)
        {
            if (m_Wrapper.m_GameOverMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameOverMapActions instance)
        {
            foreach (var item in m_Wrapper.m_GameOverMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameOverMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameOverMapActions @GameOverMap => new GameOverMapActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface IGameOverMapActions
    {
        void OnRestartGame(InputAction.CallbackContext context);
    }
}
